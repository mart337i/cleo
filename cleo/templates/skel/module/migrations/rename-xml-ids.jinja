import logging
from psycopg2 import IntegrityError, ProgrammingError
from datetime import datetime

logger = logging.getLogger(__name__)

def get_model2table(model):
    model2table = {
        "ir.actions.actions": "ir_actions",
        "ir.actions.act_window": "ir_act_window",
        "ir.actions.act_window.view": "ir_act_window_view",
        "ir.actions.act_window_close": "ir_actions",
        "ir.actions.act_url": "ir_act_url",
        "ir.actions.server": "ir_act_server",
        "ir.actions.client": "ir_act_client",
        "ir.actions.report.xml": "ir_act_report_xml",
        "ir.actions.report": "ir_act_report_xml",
    }
    return model2table.get(model, model.replace(".", "_"))

def logged_query(cr, query, args=None, skip_no_result=False):
    if args is None:
        args = ()
    args = tuple(args) if isinstance(args, list) else args
    log_level = logging.DEBUG
    log_msg = False
    start = datetime.now()
    
    try:
        cr.execute(query, args)
    except (ProgrammingError, IntegrityError):
        log_level = logging.ERROR
        log_msg = "Error after %(duration)s running %(full_query)s"
        raise
    else:
        if not skip_no_result or cr.rowcount:
            log_msg = "%(rowcount)d rows affected after %(duration)s running %(full_query)s"
    finally:
        duration = datetime.now() - start
        if log_msg:
            try:
                full_query = cr.mogrify(query, args).decode("utf-8")
            except AttributeError:
                full_query = str(cr.query)
            logger.log(log_level, log_msg, {
                "full_query": full_query,
                "rowcount": cr.rowcount,
                "duration": duration,
            })
    return cr.rowcount

def table_exists(cr, table):
    cr.execute("SELECT 1 FROM pg_class WHERE relname = %s", (table,))
    return cr.fetchone()

def rename_xmlids(cr, xmlids_spec, allow_merge=False):
    get_data_query = """SELECT res_id, model FROM ir_model_data
        WHERE module=%s AND name=%s"""
    
    for old, new in xmlids_spec:
        logger.debug("Attempting to rename %s to %s", old, new)
        if "." not in old or "." not in new:
            logger.error("Invalid XMLID format: %s -> %s", old, new)
            continue
        
        cr.execute(get_data_query, tuple(old.split(".")))
        old_row = cr.fetchone()
        
        if not old_row:
            logger.info("XMLID %s not found when renaming to %s", old, new)
            continue
        
        if allow_merge:
            cr.execute(get_data_query, tuple(new.split(".")))
            new_row = cr.fetchone()
            if new_row:
                logger.info("XMLID %s already exists when renaming from %s: Merging.", new, old)
                if new_row[1] != old_row[1]:
                    logger.error("Cannot merge XMLIDs %s and %s due to different models: %s, %s", old, new, old_row[1], new_row[1])
                    continue
                
                table = get_model2table(old_row[1])
                if not table_exists(cr, table):
                    logger.error("Table %s does not exist for model %s", table, old_row[1])
                    continue
                continue
        
        query = "UPDATE ir_model_data SET module = %s, name = %s WHERE module = %s and name = %s"
        logged_query(cr, query, tuple(new.split(".") + old.split(".")))


def migrate(cr, version):
    """
    How to use this migration function:
    
    1. Define XML ID specifications as a list of tuples:
       Each tuple should contain: (old_xmlid, new_xmlid)
       XML IDs should be in the format "module.name"
       
       Example:
       xml_ids = [
           ('old_module.old_view_id', 'new_module.new_view_id'),
           ('base.old_action', 'base.new_action'),
           ('sale.old_menu_item', 'sale.new_menu_item'),
       ]
    
    2. Call rename_xmlids with the specifications:
       rename_xmlids(cr, xml_ids)
       
       Optional parameters:
       - allow_merge=True: If the new XML ID already exists, merge with the existing one
                          (only works if both XML IDs reference the same model)
    
    This will:
    - Update the module and name fields in ir_model_data table
    - Preserve the res_id and model references
    - Log any issues (missing XML IDs, format errors, merge conflicts)
    
    Note: Both old and new XML IDs must be in proper "module.name" format.
    """
    xml_ids = [
        # Add your XML ID renames here as tuples: (old_xmlid, new_xmlid)
        # Example:
        # ('old_module.old_view_id', 'new_module.new_view_id'),
    ]
    
    if xml_ids:
        rename_xmlids(cr, xml_ids, allow_merge=False)